/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package superrolbattle.ventanas;

import instancias.Token;
import instancias.properties.Status;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.filechooser.FileNameExtensionFilter;
import recursos.AbrirGuardar;
import recursos.Recursos;

/**
 *
 * @author TiranoJuan
 */
public class JPanelFormToken extends javax.swing.JPanel {

    /**
     * Creates new form JPanelFormToken
     */
    public JPanelFormToken() {
        initComponents();
    }

    public JPanelFormToken(Token token, JFrame principal,JPanelFormToken_Accion jpa) {
        this.token = token;
        this.jpa = jpa;
        initComponents();
        jProgressBar_vida.setMinimum(0);
        jProgressBar_vida.setMaximum(token.getPuntosVida());
        jProgressBar_vida.setValue(0);

        update();
        this.repaint();
    }

    public void update() {

        jProgressBar_vida.setValue(token.getPuntosVida() - token.getEstado().getPtsDeVidaPerdidos());

        jProgressBar_vida.setStringPainted(false);
        jProgressBar_vida.setBackground(Color.YELLOW);

        if (token.getEstado().getCuerpo() == Status.FIRME) {
            jProgressBar_vida.setForeground(Color.GREEN);
        } else if (token.getEstado().getCuerpo() == Status.CANSADO) {
            jProgressBar_vida.setForeground(Color.YELLOW);
        } else if (token.getEstado().getCuerpo() == Status.EXHAUSTO) {
            jProgressBar_vida.setForeground(Color.ORANGE);
        } else if (token.getEstado().getCuerpo() == Status.DORMIDO) {
            jProgressBar_vida.setForeground(Color.RED);
        } else if (token.getEstado().getCuerpo() == Status.MUERTO) {
            jProgressBar_vida.setForeground(Color.BLACK);
        }
        jProgressBar_vida.setForeground(Color.YELLOW);

        this.jLabel_Nombre.setText("" + token.getNombre());

        // tooltip
        String tooltip
                = "<html>"
                + "Nivel: " + token.getNivel() + "<br/>"
                + "Puntos de Vida: " + token.getEstado().getPtsDeVidaPerdidos() + "  /  " + token.getPuntosVida() + "<br/>"
                + "Estado: " + token.getEstado().cuerpoString() + "<br/>"
                + "Actividad: " + token.getEstado().getActividad() + "<br/>"
                + "Puntos de Poder: " + token.podertxt()+ "<br/>"
                + "</html>";
        this.setToolTipText(tooltip);

        if (token.getUrlIcon() != null) 
            iconar(token.getUrlIcon());
    }

    public void iconar(String path) {
        /*
        URL url = this.getClass().getResource(path);
        ImageIcon fot = new ImageIcon(url);
        int w = 90;
        int h = 27;
        Icon icono = new ImageIcon(fot.getImage().getScaledInstance(w, h, Image.SCALE_DEFAULT));
        jLabel_avatar.setIcon(icono);
        this.repaint();
         */

        ImageIcon icon = new ImageIcon(path);
        Icon icono = new ImageIcon(icon.getImage().getScaledInstance(77, 77, Image.SCALE_DEFAULT));
        token.setUrlIcon(path);
        jLabel_avatar.setText(null);
        jLabel_avatar.setIcon(icono);
        jpa.iconar(path);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Nombre = new javax.swing.JLabel();
        jProgressBar_vida = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jLabel_avatar = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setToolTipText("<html>\nEstado: Incosnciente<br/>\nSalud 15 pv  / 230pv<br/>\nBo: 134<br/>\nBd: 20<br/>\nArmadra: Cota de malla 14<br/>\nArma: Espada Doble Filo\n</html>");
        setMinimumSize(new java.awt.Dimension(146, 109));
        setPreferredSize(new java.awt.Dimension(146, 109));
        setLayout(new java.awt.BorderLayout());

        jLabel_Nombre.setText("Nombre");
        add(jLabel_Nombre, java.awt.BorderLayout.PAGE_START);

        jProgressBar_vida.setBackground(new java.awt.Color(0, 255, 0));
        jProgressBar_vida.setForeground(new java.awt.Color(0, 0, 0));
        jProgressBar_vida.setStringPainted(true);
        add(jProgressBar_vida, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setLayout(new java.awt.GridLayout(1, 1));

        jLabel_avatar.setText("Icono");
        jLabel_avatar.setPreferredSize(new java.awt.Dimension(127, 74));
        jLabel_avatar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_avatarMouseClicked(evt);
            }
        });
        jPanel1.add(jLabel_avatar);

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel_avatarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_avatarMouseClicked
        cargarArhivo();
    }//GEN-LAST:event_jLabel_avatarMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_Nombre;
    private javax.swing.JLabel jLabel_avatar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar_vida;
    // End of variables declaration//GEN-END:variables
    private Token token;
    private JFrame principal;
    private JPanelFormToken_Accion jpa;

    private void cargarArhivo() {

        File fichero;
        int resultado;
        SeleccionarArchivo ventana = new SeleccionarArchivo(principal, true);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("JPG y PNG", "jpg", "png");
        ventana.jfchCargarfoto.setFileFilter(filtro);
        resultado = ventana.jfchCargarfoto.showOpenDialog(null);

        if (JFileChooser.APPROVE_OPTION == resultado) {
            
            fichero = ventana.jfchCargarfoto.getSelectedFile();
            try {
                AbrirGuardar.GuardarDir(fichero.getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(JPanelFormToken.class.getName()).log(Level.SEVERE, null, ex);
            }
            File ficheroNew = Recursos.copiarIcono(fichero, token.getNombre());
            if (ficheroNew != null) {
                try {
                    iconar(ficheroNew.toString());                    
                } catch (Exception ex) {
                    Recursos.informar("Error abriendo laimagen " + ex);
                }

            }

        }
    }

}
